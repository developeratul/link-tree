// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    username      String?      @unique
    bio           String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    imagePublicId String?
    accounts      Account[]
    sessions      Session[]
    groups        Group[]
    links         Link[]
    socialLinks   SocialLink[]

    theme                   Theme               @default(LIGHT)
    font                    Font                @default(body)
    backgroundImage         String?
    backgroundImagePublicId String?
    profileTitle            String?
    seoTitle                String?
    seoDescription          String?
    socialIconPlacement     SocialIconPlacement @default(TOP)
}

enum Theme {
    LIGHT
    DARK
}

enum Font {
    body
    serif
    sans_serif
    monospace
    cursive
    fantasy
}

enum SocialIconPlacement {
    TOP
    BOTTOM
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Group {
    id     String  @id @default(cuid())
    index  Int     @default(autoincrement())
    name   String?
    links  Link[]
    user   User    @relation(fields: [userId], references: [id])
    userId String
}

model Link {
    id                String  @id @default(cuid())
    index             Int     @default(autoincrement())
    text              String
    url               String
    thumbnail         String?
    thumbnailPublicId String?
    group             Group   @relation(fields: [groupId], references: [id])
    groupId           String
    user              User    @relation(fields: [userId], references: [id])
    userId            String
    clickCount        Int     @default(0)
    hidden            Boolean @default(false)
}

model SocialLink {
    id     String    @id @default(cuid())
    index  Int       @default(autoincrement())
    type   LinkTypes
    url    String
    User   User      @relation(fields: [userId], references: [id])
    userId String
}

enum LinkTypes {
    facebook
    instagram
    github
    twitter
    linkedIn
    youTube
    pinterest
    twitch
    whatsapp
    email
    patreon
    payment
    signal
    discord
    other
}
