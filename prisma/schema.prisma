// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String        @id @default(cuid())
    name          String?
    username      String?       @unique
    bio           String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    imagePublicId String?
    accounts      Account[]
    sessions      Session[]
    sections      Section[]
    links         Link[]
    socialLinks   SocialLink[]
    testimonials  Testimonial[]

    profileTitle String?

    seoTitle            String?
    seoDescription      String?
    socialIconPlacement SocialIconPlacement @default(TOP)

    layout                      Layout         @default(WIDE)
    bodyBackgroundType          BackgroundType @default(COLOR)
    bodyBackgroundColor         String?
    bodyBackgroundImage         String?
    bodyBackgroundImagePublicId String?
    cardBackgroundColor         String?
    themeColor                  String?
    grayColor                   String?
    foreground                  String?
    containerWidth              Int            @default(768)
    cardShadow                  CardShadow     @default(none)
    linksColumnCount            Int            @default(1)
    buttonStyle                 ButtonStyle    @default(ROUNDED)
    buttonBackground            String?
}

model Testimonial {
    id         String  @id @default(cuid())
    rating     Int
    message    String
    name       String
    email      String
    avatar     String?
    shouldShow Boolean @default(false)
    User       User    @relation(fields: [userId], references: [id])
    userId     String

    @@index([userId])
}

enum ButtonStyle {
    SHARP
    ROUNDED
    CIRCLE
    SHARP_OUTLINED
    ROUNDED_OUTLINED
    CIRCLE_OUTLINED
}

enum CardShadow {
    sm
    md
    lg
    xl
    none
}

enum BackgroundType {
    IMAGE
    COLOR
}

enum Layout {
    WIDE
    CARD
}

enum SocialIconPlacement {
    TOP
    BOTTOM
}

model Section {
    id     String  @id @default(cuid())
    index  Int
    name   String?
    links  Link[]
    user   User    @relation(fields: [userId], references: [id])
    userId String

    @@index([userId])
}

model Link {
    id                String  @id @default(cuid())
    index             Int
    text              String
    url               String
    thumbnail         String?
    thumbnailPublicId String?
    user              User    @relation(fields: [userId], references: [id])
    userId            String
    clickCount        Int     @default(0)
    hidden            Boolean @default(false)
    section           Section @relation(fields: [sectionId], references: [id])
    sectionId         String

    @@index([userId])
    @@index([sectionId])
}

model SocialLink {
    id     String @id @default(cuid())
    index  Int
    url    String
    icon   String
    User   User   @relation(fields: [userId], references: [id])
    userId String

    @@index([userId])
}
